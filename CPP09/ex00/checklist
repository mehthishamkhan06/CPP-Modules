âœ… Checklist for Input Validation (input.txt)
1. Read and Skip Header

Open the file.

If file fails to open â†’ throw (fatal).

Skip the first line (date | value).

2. Process Each Line

For each remaining line:

(a) Check line structure

Does it contain a |?

Is it in the form DATE [space] | [space] VALUE?

If not â†’ print error: Error: bad input => line_content and skip.

(b) Extract date

Take substring before the |.

Trim spaces.

Validate format YYYY-MM-DD.

Length must be 10.

Positions 4 and 7 must be -.

All other chars must be digits.

Year: valid integer.

Month: 01â€“12.

Day: valid for that month (handle leap year for February).

If invalid â†’ print error: Error: bad input => date.

(c) Extract value

Take substring after the |.

Trim spaces.

Try to parse as a number (allow integer or float).

Validation rules:

Must not be empty or non-numeric.

Must not be negative.

Must not exceed 1000 (per project requirements).

If invalid â†’ print the specific error:

"Error: not a number."

"Error: not a positive number."

"Error: too large a number."

3. If line passes validation

Look up the closest exchange rate from data.csv (this will use your data_map).

Multiply value Ã— rate.

Print result in this format:

2011-01-03 => 3 = 0.0063

4. Continue even if errors

Very important: encountering one bad line should not stop the program.

Print the error and continue with the next line.

5. Edge Cases to Test

File missing â†’ should throw.

Empty file â†’ should handle gracefully.

Wrong header format â†’ still skip first line, donâ€™t crash.

Extra spaces (e.g. "2011-01-03|3", "2011-01-03 |3", "2011-01-03| 3") â†’ trimming must work.

Invalid dates (like 2011-02-30) â†’ should error.

Negative or overly large values.

Completely junk lines.

ðŸ‘‰ This checklist gives you a roadmap:

File handling

Line structure

Date validation

Value validation

Error printing

Successful calculation